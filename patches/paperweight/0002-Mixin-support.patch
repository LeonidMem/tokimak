From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Denery <dorofeevij@gmail.com>
Date: Thu, 20 Apr 2023 14:18:02 +0300
Subject: [PATCH] Mixin support


diff --git a/paperweight-userdev/build.gradle.kts b/paperweight-userdev/build.gradle.kts
index cbf40355030b208c2fc5712eef94ca70447090ba..88396e35919dd4ec7ff30586a8726737e9b51137 100644
--- a/paperweight-userdev/build.gradle.kts
+++ b/paperweight-userdev/build.gradle.kts
@@ -5,6 +5,8 @@ plugins {
 
 dependencies {
     shade(project(":paperweight-plugin:paperweight-lib"))
+    implementation(libs.bundles.cadix)?.let { shade(it) }
+    implementation(libs.lorenzTiny)?.let { shade(it) }
     implementation(libs.kotson)
     implementation("net.minecraftforge:DiffPatch:2.0.7:all") {
         isTransitive = false
diff --git a/paperweight-userdev/src/main/kotlin/io/papermc/paperweight/userdev/PaperweightUser.kt b/paperweight-userdev/src/main/kotlin/io/papermc/paperweight/userdev/PaperweightUser.kt
index 026a3e8ef9172fce6577626698cf3c60d6ce4af1..12122cf7bc2bc28cad0eeddd1539f6918131bc09 100644
--- a/paperweight-userdev/src/main/kotlin/io/papermc/paperweight/userdev/PaperweightUser.kt
+++ b/paperweight-userdev/src/main/kotlin/io/papermc/paperweight/userdev/PaperweightUser.kt
@@ -48,6 +48,7 @@ import org.gradle.api.logging.Logging
 import org.gradle.api.plugins.JavaPlugin
 import org.gradle.api.provider.Provider
 import org.gradle.api.tasks.Delete
+import org.gradle.api.tasks.compile.JavaCompile
 import org.gradle.jvm.toolchain.JavaToolchainService
 import org.gradle.kotlin.dsl.*
 import org.gradle.util.internal.NameMatcher
@@ -166,6 +167,10 @@ abstract class PaperweightUser : Plugin<Project> {
             configureRepositories(userdevSetup)
 
             cleanSharedCaches(this, sharedCacheRootRoot)
+
+            // tokimak start
+            io.papermc.paperweight.userdev.internal.setup.MixinAnnotationInvoker.configureMixin(userdevSetup, target)
+            // tokimak end
         }
     }
 
diff --git a/paperweight-userdev/src/main/kotlin/io/papermc/paperweight/userdev/internal/setup/MixinAnnotationInvoker.kt b/paperweight-userdev/src/main/kotlin/io/papermc/paperweight/userdev/internal/setup/MixinAnnotationInvoker.kt
new file mode 100644
index 0000000000000000000000000000000000000000..8e9c3e58791e0247db2c07501824f4035255d92c
--- /dev/null
+++ b/paperweight-userdev/src/main/kotlin/io/papermc/paperweight/userdev/internal/setup/MixinAnnotationInvoker.kt
@@ -0,0 +1,120 @@
+/*
+ * This file is part of fabric-loom, licensed under the MIT License (MIT).
+ *
+ * Copyright (c) 2016-2022 FabricMC
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a copy
+ * of this software and associated documentation files (the "Software"), to deal
+ * in the Software without restriction, including without limitation the rights
+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
+ * copies of the Software, and to permit persons to whom the Software is
+ * furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included in all
+ * copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ */
+
+package io.papermc.paperweight.userdev.internal.setup
+
+import io.papermc.paperweight.tasks.*
+import io.papermc.paperweight.util.constants.*
+import java.io.File
+import java.io.IOException
+import java.util.Objects
+import java.util.stream.Collectors
+import java.util.stream.Stream
+import net.fabricmc.lorenztiny.TinyMappingFormat
+import org.gradle.api.Project
+import org.gradle.api.UnknownTaskException
+import org.gradle.api.plugins.JavaPluginExtension
+import org.gradle.api.tasks.compile.JavaCompile
+
+/**
+ * Mainly stolen from AnnotationProcessorInvoker from Fabric Loom, and also from other dependent classes
+ * (I am not a kotlin programmer, don't blame me for the poor code quality)
+ */
+object MixinAnnotationInvoker {
+    const val mixinAPDependency = "net.tetratau.toki:compile-extensions:0.6.0"
+
+
+    object MixinArguments {
+        const val IN_MAP_FILE_NAMED_INTERMEDIARY = "inMapFileMojangSpigot"
+        const val OUT_MAP_FILE_NAMED_INTERMEDIARY = "outMapFileMojangSpigot"
+        const val OUT_REFMAP_FILE = "outRefMapFile"
+        const val DEFAULT_OBFUSCATION_ENV = "defaultObfuscationEnv"
+        const val QUIET = "quiet"
+        const val SHOW_MESSAGE_TYPES = "showMessageTypes"
+    }
+
+    private fun getMappings(userdevSetup: UserdevSetup): String {
+        val mixinMappings = userdevSetup.reobfMappings.parent.resolve("mixin-mappings.tiny")
+        if (!mixinMappings.toFile().exists()) {
+            val mapping = TinyMappingFormat.STANDARD.read(userdevSetup.reobfMappings, "mojang+yarn", "spigot")
+            TinyMappingFormat.STANDARD.write(mapping, mixinMappings, "mojang", "spigot")
+        }
+        return mixinMappings.toFile().canonicalPath
+    }
+
+
+    private fun passMixinArguments(userdevSetup: UserdevSetup, project: Project, task: JavaCompile) {
+        try {
+            val args: MutableMap<String, String> = object : HashMap<String, String>() {
+                init {
+                    val mappings = getMappings(userdevSetup)
+                    put(MixinArguments.IN_MAP_FILE_NAMED_INTERMEDIARY, mappings)
+                    put(MixinArguments.OUT_MAP_FILE_NAMED_INTERMEDIARY, userdevSetup.parameters.cache.get().asFile.toPath().resolve(paperSetupOutput("", "tiny")).toFile().canonicalPath)
+                    put(MixinArguments.OUT_REFMAP_FILE, getRefmapDestination(task, "${project.name}-refmap.json"))
+                    put(MixinArguments.DEFAULT_OBFUSCATION_ENV, "mojang:$SPIGOT_NAMESPACE")
+                    put(MixinArguments.QUIET, "false")
+                }
+            }
+
+            args[MixinArguments.SHOW_MESSAGE_TYPES] = "true"
+
+            project.getLogger().debug("Outputting refmap to dir: " + getRefmapDestinationDir(task) + " for compile task: " + task)
+            args.forEach { passArgument(task, it.key, it.value) }
+        } catch (e: IOException) {
+            project.getLogger().error("Could not configure mixin annotation processors", e)
+        }
+    }
+
+    fun configureMixin(userdevSetup: UserdevSetup, project: Project) {
+        val sourceSets = project.getExtensions().getByType(JavaPluginExtension::class.java).getSourceSets()
+        sourceSets.map {
+            project.configurations.getByName(it.annotationProcessorConfigurationName)
+        }.forEach {
+            project.dependencies.add(it.name, mixinAPDependency)
+        }
+        sourceSets.stream().flatMap {
+            try {
+                val compileTask = project.tasks.getByName(it.getCompileTaskName("java"))
+                return@flatMap Stream.of(java.util.AbstractMap.SimpleEntry(it, compileTask))
+            } catch (e: UnknownTaskException) {
+                return@flatMap Stream.empty();
+            }
+        }.collect(Collectors.toMap({ it.key }, { Objects.requireNonNull(it.value as JavaCompile)})).forEach {
+            passMixinArguments(userdevSetup, project, it.value)
+        }
+    }
+
+    @Throws(IOException::class)
+    private fun getRefmapDestination(task: JavaCompile, refmapName: String): String {
+        return File(getRefmapDestinationDir(task), refmapName).canonicalPath
+    }
+
+    private fun getRefmapDestinationDir(task: JavaCompile): File {
+        return task.destinationDirectory.asFile.get()
+    }
+
+    private fun passArgument(compileTask: JavaCompile, key: String, value: String) {
+        compileTask.options.compilerArgs.add("-A$key=$value")
+    }
+}
\ No newline at end of file
